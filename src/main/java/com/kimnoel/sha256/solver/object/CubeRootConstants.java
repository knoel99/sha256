package com.kimnoel.sha256.solver.object;

import com.kimnoel.sha256.bitwise.config.PropertiesExtractor;
import com.kimnoel.sha256.bitwise.utils.BitUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Source: https://github.com/in3rsha/sha256-animation/blob/master/README.md#4-constants-constantsrb
 * SHA-256 uses sixty four constants Kt to help with mixing up the bits during the main hash computation.
 * These constants are generated by taking the cube root of the first sixty four prime numbers.
 * The fractional parts of these cube roots are irrational (they go on forever),
 * so they make for a good selection of random bits to use at constants.
 *
 * This is better than using specifically chosen constants, as this makes it less likely that
 * the hash function has been designed with a back-door.
 *
 * Anyway, to get 32 bits from these numbers, we take the fractional part and multiply it by 2^32,
 * and use the resulting integer as the constant.
 */
public class CubeRootConstants {

    private List<Word> listWordsCubeRootConstant;

    /**
     * Builder using the file containing the 64 first prime numbers in the resources.
     */
    public CubeRootConstants(){
        this.listWordsCubeRootConstant = new ArrayList<>();

        listWordsCubeRootConstant.add(new Word("01000010100010100010111110011000", 32)); //2
        listWordsCubeRootConstant.add(new Word("01110001001101110100010010010001", 32)); //3
        listWordsCubeRootConstant.add(new Word("10110101110000001111101111001111", 32)); //5
        listWordsCubeRootConstant.add(new Word("11101001101101011101101110100101", 32)); //7
        listWordsCubeRootConstant.add(new Word("00111001010101101100001001011011", 32)); //11
        listWordsCubeRootConstant.add(new Word("01011001111100010001000111110001", 32)); //13
        listWordsCubeRootConstant.add(new Word("10010010001111111000001010100100", 32)); //17
        listWordsCubeRootConstant.add(new Word("10101011000111000101111011010101", 32)); //19
        listWordsCubeRootConstant.add(new Word("11011000000001111010101010011000", 32)); //23
        listWordsCubeRootConstant.add(new Word("00010010100000110101101100000001", 32)); //29
        listWordsCubeRootConstant.add(new Word("00100100001100011000010110111110", 32)); //31
        listWordsCubeRootConstant.add(new Word("01010101000011000111110111000011", 32)); //37
        listWordsCubeRootConstant.add(new Word("01110010101111100101110101110100", 32)); //41
        listWordsCubeRootConstant.add(new Word("10000000110111101011000111111110", 32)); //43
        listWordsCubeRootConstant.add(new Word("10011011110111000000011010100111", 32)); //47
        listWordsCubeRootConstant.add(new Word("11000001100110111111000101110100", 32)); //53
        listWordsCubeRootConstant.add(new Word("11100100100110110110100111000001", 32)); //59
        listWordsCubeRootConstant.add(new Word("11101111101111100100011110000110", 32)); //61
        listWordsCubeRootConstant.add(new Word("00001111110000011001110111000110", 32)); //67
        listWordsCubeRootConstant.add(new Word("00100100000011001010000111001100", 32)); //71
        listWordsCubeRootConstant.add(new Word("00101101111010010010110001101111", 32)); //73
        listWordsCubeRootConstant.add(new Word("01001010011101001000010010101010", 32)); //79
        listWordsCubeRootConstant.add(new Word("01011100101100001010100111011100", 32)); //83
        listWordsCubeRootConstant.add(new Word("01110110111110011000100011011010", 32)); //89
        listWordsCubeRootConstant.add(new Word("10011000001111100101000101010010", 32)); //97
        listWordsCubeRootConstant.add(new Word("10101000001100011100011001101101", 32)); //101
        listWordsCubeRootConstant.add(new Word("10110000000000110010011111001000", 32)); //103
        listWordsCubeRootConstant.add(new Word("10111111010110010111111111000111", 32)); //107
        listWordsCubeRootConstant.add(new Word("11000110111000000000101111110011", 32)); //109
        listWordsCubeRootConstant.add(new Word("11010101101001111001000101000111", 32)); //113
        listWordsCubeRootConstant.add(new Word("00000110110010100110001101010001", 32)); //127
        listWordsCubeRootConstant.add(new Word("00010100001010010010100101100111", 32)); //131
        listWordsCubeRootConstant.add(new Word("00100111101101110000101010000101", 32)); //137
        listWordsCubeRootConstant.add(new Word("00101110000110110010000100111000", 32)); //139
        listWordsCubeRootConstant.add(new Word("01001101001011000110110111111100", 32)); //149
        listWordsCubeRootConstant.add(new Word("01010011001110000000110100010011", 32)); //151
        listWordsCubeRootConstant.add(new Word("01100101000010100111001101010100", 32)); //157
        listWordsCubeRootConstant.add(new Word("01110110011010100000101010111011", 32)); //163
        listWordsCubeRootConstant.add(new Word("10000001110000101100100100101110", 32)); //167
        listWordsCubeRootConstant.add(new Word("10010010011100100010110010000101", 32)); //173
        listWordsCubeRootConstant.add(new Word("10100010101111111110100010100001", 32)); //179
        listWordsCubeRootConstant.add(new Word("10101000000110100110011001001011", 32)); //181
        listWordsCubeRootConstant.add(new Word("11000010010010111000101101110000", 32)); //191
        listWordsCubeRootConstant.add(new Word("11000111011011000101000110100011", 32)); //193
        listWordsCubeRootConstant.add(new Word("11010001100100101110100000011001", 32)); //197
        listWordsCubeRootConstant.add(new Word("11010110100110010000011000100100", 32)); //199
        listWordsCubeRootConstant.add(new Word("11110100000011100011010110000101", 32)); //211
        listWordsCubeRootConstant.add(new Word("00010000011010101010000001110000", 32)); //223
        listWordsCubeRootConstant.add(new Word("00011001101001001100000100010110", 32)); //227
        listWordsCubeRootConstant.add(new Word("00011110001101110110110000001000", 32)); //229
        listWordsCubeRootConstant.add(new Word("00100111010010000111011101001100", 32)); //233
        listWordsCubeRootConstant.add(new Word("00110100101100001011110010110101", 32)); //239
        listWordsCubeRootConstant.add(new Word("00111001000111000000110010110011", 32)); //241
        listWordsCubeRootConstant.add(new Word("01001110110110001010101001001010", 32)); //251
        listWordsCubeRootConstant.add(new Word("01011011100111001100101001001111", 32)); //257
        listWordsCubeRootConstant.add(new Word("01101000001011100110111111110011", 32)); //263
        listWordsCubeRootConstant.add(new Word("01110100100011111000001011101110", 32)); //269
        listWordsCubeRootConstant.add(new Word("01111000101001010110001101101111", 32)); //271
        listWordsCubeRootConstant.add(new Word("10000100110010000111100000010100", 32)); //277
        listWordsCubeRootConstant.add(new Word("10001100110001110000001000001000", 32)); //281
        listWordsCubeRootConstant.add(new Word("10010000101111101111111111111010", 32)); //283
        listWordsCubeRootConstant.add(new Word("10100100010100000110110011101011", 32)); //293
        listWordsCubeRootConstant.add(new Word("10111110111110011010001111110111", 32)); //307
        listWordsCubeRootConstant.add(new Word("11000110011100010111100011110010", 32)); //311
    }

    public List<Word> getListWordsCubeRootConstant() {
        return listWordsCubeRootConstant;
    }

    public void setListWordsCubeRootConstant(List<Word> listWordsCubeRootConstant) {
        this.listWordsCubeRootConstant = listWordsCubeRootConstant;
    }
}
