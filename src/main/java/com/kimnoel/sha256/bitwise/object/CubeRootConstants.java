package com.kimnoel.sha256.bitwise.object;

import com.kimnoel.sha256.bitwise.config.PropertiesExtractor;
import com.kimnoel.sha256.bitwise.utils.BitUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Source: https://github.com/in3rsha/sha256-animation/blob/master/README.md#4-constants-constantsrb
 * SHA-256 uses sixty four constants Kt to help with mixing up the bits during the main hash computation.
 * These constants are generated by taking the cube root of the first sixty four prime numbers.
 * The fractional parts of these cube roots are irrational (they go on forever),
 * so they make for a good selection of random bits to use at constants.
 *
 * This is better than using specifically chosen constants, as this makes it less likely that
 * the hash function has been designed with a back-door.
 *
 * Anyway, to get 32 bits from these numbers, we take the fractional part and multiply it by 2^32,
 * and use the resulting integer as the constant.
 */
public class CubeRootConstants {

    private List<String> first64CubeRoots;

    /**
     * Builder using the file containing the 64 first prime numbers in the resources.
     */
    public CubeRootConstants(){
        this.first64CubeRoots = new ArrayList<>();
        String[] primeList = PropertiesExtractor.getProperties("primes").split(",");

        for (String prime : primeList){
            this.first64CubeRoots.add(fractionalPartOfCubeRootTo32Bits(Integer.parseInt(prime)));
        }
    }

    /**
     * Extract the fractional part of the cube root of the input integer and
     * convert it into a 32 bits number.
     * @param x integer
     * @return 32 bits binary number
     */
    public static String fractionalPartOfCubeRootTo32Bits(Integer x){
        Double value = (Math.cbrt(x) % 1)*4294967296d; //4294967296L=2^32

        return BitUtils.toNBits(Long.toBinaryString(value.longValue()), 32);
    }

    public List<String> getFirst64CubeRoots() {
        return first64CubeRoots;
    }

    public void setFirst64CubeRoots(List<String> first64CubeRoots) {
        this.first64CubeRoots = first64CubeRoots;
    }
}
